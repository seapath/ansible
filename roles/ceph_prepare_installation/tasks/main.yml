# Copyright (C) 2024 RTE
# SPDX-License-Identifier: Apache-2.0

---
- name: Create Ceph log directory
  file:
      path: /var/log/ceph
      owner: ceph
      group: ceph
      mode: "0770"
      state: directory
- name: Create Ceph crash directory
  file:
      path: /var/lib/ceph/crash/posted
      owner: ceph
      group: ceph
      mode: "0770"
      state: directory
  register: new_ceph_installation

- name: Prepare OSD disk # noqa: no-handler
  when:
    - new_ceph_installation.changed
  block:
    - name: Refresh LVM VG
      command:
        cmd:  vgchange --refresh
      changed_when: true
    - name: Cleanup LV if we are in existing LV situation
      when:
        - lvm_volumes is defined
        - ansible_lvm['lvs'][lvm_volumes[0].data] is defined
        - not (is_using_cephadm | default(false))
      block:
        - name: Cleanup Ceph LV with ceph-volume
          command: "ceph-volume lvm zap /dev/{{ lvm_volumes[0].data_vg }}/{{ lvm_volumes[0].data }}"
          changed_when: true
    - name: Create VG/LV if they don't exist
      when:
        - lvm_volumes is not defined or ansible_lvm['lvs'][lvm_volumes[0].data] is not defined
      block:
        - name: Get real path for OSD disk
          command: "realpath {{ ceph_osd_disk }}" # Get the resolved path of the disk given initialy by the "/dev/disk/by-path/" for ceph purposes
          register: ceph_osd_realdisk
          changed_when: false
        - name: Cleanup Ceph OSD disks with ceph-volume
          command: "ceph-volume lvm zap {{ ceph_osd_realdisk.stdout }} --destroy" # Zapping the disk and destroying any vgs or lvs present
          when: lvm_volumes is not defined or lvm_volumes[0].device_number == 1 # The disk must not be zapped in the case of a single disk for linux and ceph
          changed_when: true
        - name: Cleanup Ceph lvm's partition with ceph-volume
          command: "ceph-volume lvm zap /dev/{{ lvm_volumes[0].data_vg }}" # In the case of a single-disk installation, only the Ceph partition is zapped
          when: lvm_volumes is defined and ansible_lvm['lvs'][lvm_volumes[0].data] is defined
          changed_when: true
        - name: Create volumes for OSD disk
          when:
            - lvm_volumes is defined
          block:
            - name: Get partition info
              community.general.parted:
                device: "{{ ceph_osd_realdisk.stdout }}"
                unit: MiB
                state: info
              register: parted_info
        
            - name: Check if current partition exists
              set_fact:
                current_exists: >-
                  {{ parted_info.partitions
                     | selectattr('num', 'equalto', lvm_volumes[0].device_number)
                     | list | length > 0 }}
        
            - name: Check if previous partition exists
              set_fact:
                previous_exists: >-
                  {{ parted_info.partitions
                     | selectattr('num', 'equalto', lvm_volumes[0].device_number - 1)
                     | list | length > 0 }}
        
            - name: Get end of previous partition
              set_fact:
                prev_end: >-
                  {{ (parted_info.partitions
                       | selectattr('num', 'equalto', lvm_volumes[0].device_number - 1)
                       | map(attribute='end')
                       | first) | float }}
              when: previous_exists
        
            - debug:
                var: prev_end
            - debug:
                var: lvm_volumes[0].device_size
            - debug:
                msg: "{{ ((prev_end | float) + (lvm_volumes[0].device_size | float)) | round(2) }}"

            - name: Calculate partition boundaries
              set_fact:
                part_start: "{{ (prev_end | float) | round(2) }}MiB"
                part_end: "{{ ((prev_end | float) + (lvm_volumes[0].device_size | float) | float) | round(2) }}MiB"
              when: previous_exists
        
            - name: Create partition using parted module
              community.general.parted:
                device: "{{ ceph_osd_realdisk.stdout }}"
                number: "{{ lvm_volumes[0].device_number }}"
                label: gpt
                name: ""
                part_start: "{{ part_start }}"
                part_end: "{{ part_end }}"
                flags:
                  - lvm
                state: present
              when:
                - not current_exists
                - previous_exists
              register: ceph_osd_result
            - name: Get disk/by-path of OSD disk
              command: "/usr/bin/find -L /dev/disk/by-path -samefile {{ ceph_osd_result.disk.dev }} -print -quit"
              register: ceph_osd_finddisk
              changed_when: false
            - name: Create volume group on the partition
              community.general.lvg:
                vg: "{{ lvm_volumes[0].data_vg }}"
                pvs: "{{ ceph_osd_finddisk.stdout }}-part{{ lvm_volumes[0].device_number }}"
            - name: Create logical volume in the VG
              community.general.lvol:
                vg: "{{ lvm_volumes[0].data_vg }}"
                lv: "{{ lvm_volumes[0].data }}"
                size: "{{ lvm_volumes[0].data_size }}"
