# Copyright (C) 2023-2024 Savoir-faire Linux, Inc.
# SPDX-License-Identifier: Apache-2.0

name: CI Yocto

env:
  WORK_DIR: /tmp/seapath_ci_${{ github.run_id }}_${{ github.run_attempt }}_${{ github.sha }}

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [main]
  workflow_call:
    inputs:
      pcap_loop:
        default: 60
        required: false
        type: number
      weekly:
        default: false
        required: false
        type: boolean
  workflow_dispatch:

permissions:
  actions: write
  checks: write

jobs:
  CI:
    runs-on: [self-hosted, runner-SFL]
    env:
      PCAP_LOOP: ${{ inputs.pcap_loop == '' && '60' || inputs.pcap_loop  }}
    steps:

      - name: Initialize sources
        run: mkdir ${{ env.WORK_DIR }}; cd ${{ env.WORK_DIR }};
             git clone -q --depth 1 --recurse-submodules -b main https://github.com/seapath/ci ci;
             echo "CI sources downloaded successfully";
             ci/launch-yocto.sh init;

      - name: Launch Ansible-lint
        run: |-
          cd ${{ env.WORK_DIR }}/ansible
          cqfd -b ansible-lint

      - name: Configure SEAPATH
        id: conf
        run: cd ${{ env.WORK_DIR }};
             mkdir -p ansible/examples/inventories;
             cp ansible/inventories/netplan* ansible/examples/inventories/;
             ci/launch-yocto.sh conf;

      - name: Launch system tests
        if: ${{ always() && steps.conf.conclusion == 'success' }}
        run: cd ${{ env.WORK_DIR }};
             ci/launch-yocto.sh system;

      - name: Deploy VMs
        if: ${{ always() && steps.conf.conclusion == 'success' }}
        run: cd ${{ env.WORK_DIR }};
            ci/launch-yocto.sh deploy_vms;

      - name: Run seapath-benchmark
        if: ${{ inputs.weekly == 'true' && steps.conf.conclusion == 'success' }}
        run: cd ${{ env.WORK_DIR }};
            ci/launch-yocto.sh run_benchmark_weekly;

      - name: Launch VMs tests
        if: ${{ always() && steps.conf.conclusion == 'success' }}
        run: cd ${{ env.WORK_DIR }};
             ci/launch-yocto.sh test_vms;

      - name: Launch latency tests
        if: ${{ always() && steps.conf.conclusion == 'success' }}
        run: cd ${{ env.WORK_DIR }};
            ci/launch-yocto.sh test_latency

      - name: Upload test report
        if: ${{ always() && steps.conf.conclusion == 'success' }}
        run: cd ${{ env.WORK_DIR }};
             ci/launch-yocto.sh report;

      - name: Clean
        if: always()
        run: rm -rf $WORK_DIR;
