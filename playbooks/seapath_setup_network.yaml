# Copyright (C) 2020-2024, RTE (http://www.rte-france.com)
# Copyright (C) 2023-2024 Savoir-faire Linux, Inc.
# SPDX-License-Identifier: Apache-2.0

# This Ansible playbook configures the networks and defines the hostnames. It
# can be used on cluster machines. It is called by the playbook
# seapath_setup_main.yaml, but can also be called independently.

---

- name: Apply network with systemd-networkd roles
  become: true
  hosts:
    - cluster_machines
    - standalone_machine
  vars_files:
    - ../vars/network_vars.yml
  vars:
    systemd_networkd_apply_config: "{{ apply_network_config | default(false) }}"
  roles:
    - role: systemd_networkd
      when: netplan_configurations is not defined

- name: Apply network config with netplan
  become: true
  hosts:
    - cluster_machines
    - standalone_machine
  tasks:
    - block:
        - name: Create /etc/netplan directory
          file:
            path: /etc/netplan
            state: directory
            owner: root
            group: root
            mode: '0755'
        - name: Copy Netplan configuration file
          template:
            src: "../{{ item }}"
            dest: "/etc/netplan/{{ item | basename | replace('.j2', '') }}"
            owner: root
            group: root
            mode: '0600'
          with_items: "{{ netplan_configurations }}"
          notify: Apply Netplan configuration
        - name: avoid reboot for netplan
          set_fact:
            need_reboot: false
      when: netplan_configurations is defined
  handlers:
    - name: Apply Netplan configuration
      command: netplan apply

- name: Configure cluster network
  hosts: cluster_machines
  become: true
  tasks:
    - name: Populate service facts
      service_facts:
    - block:
      - name: stop and disable hsr service if it exists
        service:
          name: "hsr"
          state: stopped
          enabled: false
        when: "'hsr.service' in services"
      - name: Remove team0 bridge in OVS
        command: "/usr/bin/ovs-vsctl --if-exists del-br team0"
      - name: Create team0 bridge in OVS
        command: "/usr/bin/ovs-vsctl add-br team0"
      - name: Add interface team0_0 to team0 bridge
        command: "/usr/bin/ovs-vsctl -- --if-exists del-port {{ team0_0 }} -- add-port team0 {{ team0_0 }}"
      - name: Add interface team0_1 to team0 bridge
        command: "/usr/bin/ovs-vsctl -- --if-exists del-port {{ team0_1 }} -- add-port team0 {{ team0_1 }}"
      - name: Enable RSTP on team0 bridge
        command: "/usr/bin/ovs-vsctl set Bridge team0 rstp_enable=true"
      - name: Set RSTP priority on team0 bridge
        command: "/usr/bin/ovs-vsctl set Bridge team0 other_config=rstp-priority={{ br_rstp_priority | default(16384) }}"
      - name: Restart conntrackd
        ansible.builtin.systemd:
          name: conntrackd
          state: restarted
        when: conntrackd_ignore_ip_list is defined
      when:
        - cluster_protocol is not defined or cluster_protocol != "HSR" or hsr_mac_address is not defined
        - skip_recreate_team0_config is not defined or skip_recreate_team0_config is not true
        - netplan_configurations is not defined

- name: Configure OVS
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  vars:
    apply_config: "{{ apply_network_config | default(false) }}"
  tasks:
    - name: Create OVS configuration
      template:
        src: ../templates/ovs_configuration.json.j2
        dest: /etc/ovs_configuration.json
        validate: setup_ovs.py -v -c -f %s
      register: ovs_conf
    - name: Restart seapath-config_ovs
      ansible.builtin.systemd:
        name: seapath-config_ovs
        state: restarted
      when:
        - apply_config
        - ovs_conf.changed
    - name: Register reboot
      set_fact:
        need_reboot: true
      when:
        - not apply_config
        - ovs_conf.changed

- name: Configure hostname
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - name: Set hostname
      hostname:
        name: "{{ inventory_hostname }}"
        use: systemd

- name: Configure hosts
  hosts: cluster_machines
  become: true
  tasks:
    - name: Build hosts file
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}(| rbd)$'
        line: "{{ hostvars[item].cluster_ip_addr }} {{ item }}{% if item == inventory_hostname %} rbd{% endif %}"
        state: present
      when: hostvars[item].cluster_ip_addr is defined
      loop: "{{ groups['cluster_machines'] }}"
    - name: Add rbd in hosts file
      replace:
        path: /etc/hosts
        regexp: '.*{{ inventory_hostname }}$'
        replace: '{{ cluster_ip_addr }} {{ inventory_hostname }} rbd'
      when: cluster_ip_addr is defined

- name: Configure DNS with resolved
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - block:
      - name: configure LLMNR /etc/systemd/resolved.conf
        lineinfile:
          dest: /etc/systemd/resolved.conf
          regexp: "^#?LLMNR="
          line: "LLMNR=no"
          state: present
        register: resolved_conf1
      - name: configure DNS /etc/systemd/resolved.conf
        lineinfile:
          dest: /etc/systemd/resolved.conf
          regexp: "^#?DNS="
          line: "DNS={{ dns_servers | join(' ') if dns_servers is not string else dns_servers }}"
          state: present
        register: resolved_conf2
      - name: Create resolv.conf stub link
        ansible.builtin.file:
          src: /run/systemd/resolve/resolv.conf
          dest: /etc/resolv.conf
          state: link
          force: true
        register: resolved_conf3
      - name: Enable systemd-resolved
        ansible.builtin.systemd:
          name: systemd-resolved
          state: started
          enabled: true
      - name: Restart systemd-resolved
        ansible.builtin.systemd:
          name: systemd-resolved
          state: restarted
          enabled: true
        when: resolved_conf1.changed or resolved_conf2.changed or resolved_conf3.changed
      when:
      - dns_servers is defined
      - netplan_configurations is not defined

- name: disable resolved if no dns server is defined
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
  - name: Stop and disable systemd-resolved
    ansible.builtin.systemd:
      name: systemd-resolved
      state: stopped
      enabled: false
    when: dns_servers is not defined

- name: Configure syslog-ng
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - name: Set observer IP address in /etc/syslog-ng/syslog-ng.conf
      lineinfile:
        dest: /etc/syslog-ng/syslog-ng.conf
        regexp: '(^\s*#?\s*(ip\()?)("[1-9][0-9]{2}(\.[0-9]{1,3}){3}")(\))?'
        line: '\1"{{ syslog_server_ip }}"\5'
        backrefs: true
        state: present
      notify:
        - Restart systemd syslog-ng
      when: syslog_server_ip is defined
  handlers:
    - name: Restart systemd syslog-ng
      vars:
        apply_config: "{{ apply_network_config | default(false) }}"
      ansible.builtin.service:
        name: syslog-ng@default
        state: restarted
      when:
        apply_config or (need_reboot is defined and not need_reboot)

- name: Configure systemd-networkd-wait-online.service
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - block:
        - name: Create systemd-networkd-wait-online.service.d directory
          file:
            path: /etc/systemd/system/systemd-networkd-wait-online.service.d/
            state: directory
            owner: root
            group: root
            mode: 0755
        - name: Copy systemd-networkd-wait-online.service overide
          template:
            src: ../templates/systemd-networkd-wait-online.service.j2
            dest: /etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf
        - name: enable systemd-networkd-wait-online.service
          ansible.builtin.systemd:
            name: systemd-networkd-wait-online.service
            enabled: yes
      when: netplan_configurations is not defined

- name: Restart machine if needed
  hosts:
    - cluster_machines
    - standalone_machine
  tasks:
    - include_tasks: tasks/soft_restart_machine.yaml
      when: need_reboot is defined and need_reboot
