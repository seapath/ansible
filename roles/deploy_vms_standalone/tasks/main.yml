# Copyright (C) 2024 RTE
# SPDX-License-Identifier: Apache-2.0

---
- name: List all VMs
  community.libvirt.virt:
    command: list_vms
  register: all_vms

- name: Stop VM
  community.libvirt.virt:
    state: destroyed
    name: "{{ item }}"
  when:
    - item in all_vms.list_vms
    - hostvars[item].force is defined
    - hostvars[item].force
  loop: "{{ groups['VMs'] }}"

- name: Undefine VM
  command: "virsh undefine --nvram {{ item }}"
  when:
    - item in all_vms.list_vms
    - hostvars[item].force is defined
    - hostvars[item].force
  loop: "{{ groups['VMs'] }}"
  changed_when: true

- name: Print info
  debug:
    var: hostvars[item]
    verbosity: 2
  loop: "{{ groups['VMs'] }}"

- name: Check tmp folder permission
  file:
    path: "{{ deploy_vms_standalone_qcow2tmpuploadfolder }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  when:
    - deploy_vms_standalone_qcow2tmpuploadfolder is defined
    - deploy_vms_standalone_qcow2tmpuploadfolder != "/tmp"

- name: Copy the disk on target
  copy:
    src: "{{ hostvars[item].vm_disk }}"
    dest: "{{ deploy_vms_standalone_disk_pool }}/{{ hostvars[item].inventory_hostname }}.qcow2"
  vars:
    ansible_remote_tmp: "{{ deploy_vms_standalone_qcow2tmpuploadfolder | default(omit) }}"
  when:
    - deploy_vms_standalone_disk_copy | bool
    - hostvars[item].disk_extract is not defined or not hostvars[item].disk_extract | bool
    - item not in all_vms.list_vms or (item in all_vms.list_vms and hostvars[item].force is defined and hostvars[item].force)
  loop: "{{ groups['VMs'] }}"

- name: Copy the gzipped disk on target
  copy:
    src: "{{ hostvars[item].vm_disk }}"
    dest: "{{ deploy_vms_standalone_disk_pool }}/{{ hostvars[item].inventory_hostname }}.img.gz"
  when:
    - deploy_vms_standalone_disk_copy | default(true) | bool
    - hostvars[item].disk_extract is defined
    - hostvars[item].disk_extract | bool
    - item not in all_vms.list_vms or (item in all_vms.list_vms and hostvars[item].force is defined and hostvars[item].force)
  loop: "{{ groups['VMs'] }}"

- name: Extract the gzipped disk on target
  command:
    cmd: "gzip -d -f {{ deploy_vms_standalone_disk_pool }}/{{ hostvars[item].inventory_hostname }}.img.gz"
    creates: "{{ hostvars[item].inventory_hostname }}.img"
  when:
    - deploy_vms_standalone_disk_copy | default(true) | bool
    - hostvars[item].disk_extract is defined
    - hostvars[item].disk_extract | bool
    - item not in all_vms.list_vms or (item in all_vms.list_vms and hostvars[item].force is defined and hostvars[item].force)
  loop: "{{ groups['VMs'] }}"

- name: Add main disk to disk list
  # This is only done in standalone because the disk is handled by vm-manager in the cluster
  set_fact:
    standalone_main_disk: "{{ hostvars[item].inventory_hostname }}.qcow2"
  delegate_to: "{{ item }}"
  delegate_facts: true
  loop: "{{ groups['VMs'] }}"
  when: item not in all_vms.list_vms or (item in all_vms.list_vms and hostvars[item].force is defined and hostvars[item].force)

- name: Export VM config for debug in /tmp
  template:
    src: "{{ hostvars[item].vm_template }}"
    dest: "/tmp/{{ hostvars[item].inventory_hostname }}.xml"
  vars:
    vm: "{{ hostvars[item] }}"
  when: ansible_verbosity >= 2
  loop: "{{ groups['VMs'] }}"

- name: Create VMs
  community.libvirt.virt:
    command: define
    xml: >-
      {{ lookup('template',
      hostvars[item].vm_template,
      template_vars=dict(vm=hostvars[item])) }}
  loop: "{{ groups['VMs'] }}"
  when: item not in all_vms.list_vms or (item in all_vms.list_vms and hostvars[item].force is defined and hostvars[item].force)

- name: Start VMs
  community.libvirt.virt:
    name: "{{ item }}"
    state: running
  loop: "{{ groups['VMs'] }}"
  when: hostvars[item].enable | default(true)
