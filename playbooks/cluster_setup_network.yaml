# Copyright (C) 2020, RTE (http://www.rte-france.com)
# SPDX-License-Identifier: Apache-2.0

# This Ansible playbook configures the networks and defines the hostnames. It
# can be used on cluster machines and VMs.

---
- name: configure cluster network
  hosts: cluster_machines
  become: true
  tasks:
    - name: Remove team0 bridge in OVS
      command: "/usr/bin/ovs-vsctl --if-exists del-br team0"
    - name: Create team0 bridge in OVS
      command: "/usr/bin/ovs-vsctl add-br team0"
    - name: Enable RSTP on team0 bridge
      command: "/usr/bin/ovs-vsctl set Bridge team0 rstp_enable=true"
    - name: Set RSTP priority on team0 bridge
      command: "/usr/bin/ovs-vsctl set Bridge team0 other_config=rstp-priority={{ br_rstp_priority }}"
    - name: Add interface team0_0 to team0 bridge
      command: "/usr/bin/ovs-vsctl -- --if-exists del-port {{ team0_0 }} -- add-port team0 {{ team0_0 }}"
    - name: Add interface team0_1 to team0 bridge
      command: "/usr/bin/ovs-vsctl -- --if-exists del-port {{ team0_1 }} -- add-port team0 {{ team0_1 }}"

- name: Configure OVS
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  vars:
    apply_config: "{{ apply_network_config | default(false) }}"
  tasks:
    - name: Create OVS configuration
      template:
        src: ../templates/ovs_configuration.json.j2
        dest: /etc/ovs_configuration.json
        validate: setup_ovs.py -v -c -f %s
      register: ovs_conf
    - name: Restart votp-config_ovs
      ansible.builtin.systemd:
        name: votp-config_ovs
        state: restarted
      when:
        - apply_config
        - ovs_conf.changed
    - name: Register reboot
      set_fact:
        need_reboot: true
      when:
        - not apply_config
        - ovs_conf.changed

- name: Configure Network
  become: true
  hosts:
    - cluster_machines
    - standalone_machine
  vars_files:
    - ../vars/network_vars.yml
  roles:
    - systemd_networkd

- name: Network configuration
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  vars:
    apply_config: "{{ apply_network_config | default(false) }}"
  tasks:
    - name: Remove FAI network configuration
      file:
        path: "/etc/systemd/network/{{ item }}.network"
        state: absent
      with_items:
        - 01-init.network
        - 00-init-dhcp
        - 00-init
    - name: Restart systemd-networkd
      ansible.builtin.systemd:
        name: systemd-networkd
        state: restarted
      when:
        apply_config

- name: Configure hosts and hostname
  hosts: cluster_machines
  become: true
  tasks:
    - name: Set hostname
      hostname:
        name: "{{ inventory_hostname }}"
        use: systemd
    - name: Build hosts file
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}(| rbd)$'
        line: "{{ hostvars[item].cluster_ip_addr }} {{ item }}{% if item == inventory_hostname %} rbd{% endif %}"
        state: present
      when: hostvars[item].cluster_ip_addr is defined
      loop: "{{ groups['cluster_machines'] }}"
    - name: remove 'debian' from hosts file
      lineinfile:
        dest: /etc/hosts
        state: absent
        regexp: '^127.*debian'

- name: Configure hosts and hostname
  hosts: standalone_machine
  become: true
  tasks:
    - name: Set hostname
      hostname:
        name: "{{ inventory_hostname }}"
        use: systemd
    - name: Build hosts file
      lineinfile:
        dest: /etc/hosts
        line: "{{ ip_addr }} {{ inventory_hostname }}"
        state: present
    - name: remove 'debian' from hosts file
      lineinfile:
        dest: /etc/hosts
        state: absent
        regexp: '^127.*debian'

- name: Configure DNS with resolved
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - block:
      - name: configure /etc/systemd/resolved.conf
        lineinfile:
          dest: /etc/systemd/resolved.conf
          regexp: "^#?DNS="
          line: "DNS={{ dns_servers }}"
          state: present
        register: resolved_conf
      - name: Create resolv.conf stub link
        ansible.builtin.file:
          src: /run/systemd/resolve/resolv.conf
          dest: /etc/resolv.conf
          state: link
          force: true
        register: resolv_conf
      - name: Enable systemd-resolved
        ansible.builtin.systemd:
          name: systemd-resolved
          state: started
          enabled: true
      - name: Restart systemd-resolved
        ansible.builtin.systemd:
          name: systemd-resolved
          state: restarted
          enabled: true
        when: resolved_conf.changed or resolv_conf.changed
      when: dns_servers is defined

- name: Configure TimeMaster
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - name: Populate service facts
      service_facts:
    - name: stop and disable systemd-timesyncd if it exists
      service:
        name: "systemd-timesyncd"
        state: stopped
        enabled: false
      when: "'systemd-timesyncd' in services"
    - name: stop and disable chrony
      service:
        name: "chrony"
        state: stopped
        enabled: false
    - name: Create timemaster configuration
      template:
        src: ../templates/timemaster.conf.j2
        dest: /etc/linuxptp/timemaster.conf
      register: timemasterconf1
    - name: Add timemaster ptp systemd after
      lineinfile:
        path: /lib/systemd/system/timemaster.service
        line: 'After=chronyd.service ntpd.service ntpdate.service sntp.service sys-devices-virtual-net-ptp.device'
        regexp: '^After='
        state: present
    - name: Add timemaster ptp systemd wants
      lineinfile:
        path: /lib/systemd/system/timemaster.service
        line: 'Wants=sys-devices-virtual-net-ptp.device'
        regexp: '^Wants='
        insertafter: '^After='
        state: present
    - name: comment pool configuration in chrony.conf
      replace:
        path: /etc/chrony/chrony.conf
        regexp: '^(pool .*)'
        replace: '#\1'
      register: timemasterconf2
    - name: Create timemaster.service.d directory
      file:
        path: /etc/systemd/system/timemaster.service.d/
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Copy timemaster.service overide
      template:
        src: ../templates/timemaster.service.j2
        dest: /etc/systemd/system/timemaster.service.d/override.conf
      register: timemasterconf3
    - name: start and enable timemaster
      service:
        name: "timemaster"
        state: started
        enabled: true
    - name: restart timemaster if necessary
      service:
        name: "timemaster"
        state: restarted
        enabled: true
      when: timemasterconf1.changed or timemasterconf2.changed or timemasterconf3.changed

- name: Configure syslog-ng
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - name: Set observer IP address in /etc/syslog-ng/syslog-ng.conf
      lineinfile:
        dest: /etc/syslog-ng/syslog-ng.conf
        regexp: '(^\s*#?\s*(ip\()?)("[1-9][0-9]{2}(\.[0-9]{1,3}){3}")(\))?'
        line: '\1"{{ syslog_server_ip }}"\5'
        backrefs: true
        state: present
      notify:
        - Restart systemd syslog-ng

  handlers:
    - name: Restart systemd syslog-ng
      vars:
        apply_config: "{{ apply_network_config | default(false) }}"
      ansible.builtin.service:
        name: syslog-ng@default
        state: restarted
      when:
        apply_config

- name: Configure systemd-networkd-wait-online.service
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - name: Create systemd-networkd-wait-online.service.d directory
      file:
        path: /etc/systemd/system/systemd-networkd-wait-online.service.d/
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Copy systemd-networkd-wait-online.service overide
      template:
        src: ../templates/systemd-networkd-wait-online.service.j2
        dest: /etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf
    - name: enable systemd-networkd-wait-online.service
      ansible.builtin.systemd:
        name: systemd-networkd-wait-online.service
        enabled: yes

- name: Configure sriov libvirt network pool
  hosts:
    - hypervisors
    - standalone_machine
  become: true
  tasks:
    - name: calling sriov network pool creation (with a loop)
      include_tasks: tasks/sriov_pool.yaml
      with_items: "{{ sriov | dict2items }}"
      vars:
        interface: "{{ item.key }}"
        sriov_network_pool_name: "{{ 'sr-iov-net-' + item.key }}"
      when: sriov is defined

- name: Restart machine if needed
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - block:
        - name: Restart to configure network
          reboot:
        - name: Wait for host to be online
          wait_for_connection:
      when:
        - need_reboot is defined and need_reboot
        - skip_reboot_setup_network is not defined or not skip_reboot_setup_network
