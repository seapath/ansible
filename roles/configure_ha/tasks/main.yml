# Copyright (C) 2024 RTE
# SPDX-License-Identifier: Apache-2.0

---
- include_vars: "{{ seapath_distro }}.yml"

- name: Save cluster machine informations
  template:
    src: cluster.conf.j2
    dest: /etc/cluster.conf

# Check if corosync is already setup
- name: Check corosync service status
  systemd:
    name: corosync
    state: started
  check_mode: true
  register: corosync_service_status
- name: Create a group with unconfigured_machines # noqa: no-handler
  add_host:
    name: "{{ item }}"
    groups: unconfigured_machine_group
  run_once: true
  loop: "{{ groups['cluster_machines'] }}"
  changed_when: false
  when: hostvars[item].corosync_service_status.changed
- name: Create a group with valid_machines # noqa: no-handler
  add_host:
    name: "{{ item }}"
    groups: valid_machine
  run_once: true
  loop: "{{ groups['cluster_machines'] }}"
  changed_when: false
  when: not hostvars[item].corosync_service_status.changed

# Setup Corosync from scratch
- name: Setup Corosync from scratch
  when: groups['valid_machine'] is undefined
  block:

    - name: Generating /etc/corosync/authkey file
      command:
        /usr/sbin/corosync-keygen
      run_once: true
      changed_when: true
    - name: Waiting for /etc/corosync/authkey file
      wait_for:
        path: '/etc/corosync/authkey'
        timeout: 30
      when: inventory_hostname == play_hosts[0]
    - name: Fetching /etc/corosync/authkey
      slurp:
        src: '/etc/corosync/authkey'
      register: tmp_authkey
      when: inventory_hostname == play_hosts[0]
    - name: Synchronizing /etc/corosync/authkey everywhere
      copy:
        content: "{{ hostvars[play_hosts[0]].tmp_authkey['content'] | b64decode }}"
        dest: /etc/corosync/authkey
        mode: 0400
      when: inventory_hostname != play_hosts[0]

    - name: Templating corosync.conf
      template:
        src: corosync.conf.j2
        dest: /etc/corosync/corosync.conf
      register: corosync_conf
    - name: Restart Corosync # noqa: no-handler
      ansible.builtin.systemd:
        name: corosync
        state: restarted
        enabled: yes
      when: corosync_conf.changed

- when:
    - groups['valid_machine'] is defined
    - groups['unconfigured_machine_group'] is defined
  run_once: true
  delegate_to: "{{ groups['valid_machine'][0] }}"
  block:
    - name: Fetch corosync configuration
      fetch:
        src: "/etc/corosync/corosync.conf"
        dest: "{{ configure_ha_tmpdir }}/corosync.conf"
        flat: true
    - name: Fetch corosync key
      fetch:
        src: "/etc/corosync/authkey"
        dest: "{{ configure_ha_tmpdir }}/authkey"
        flat: true

- name: Setup Corosync using existing configuration
  when:
    - groups['valid_machine'] is defined
    - "'unconfigured_machine_group' in group_names"
  block:
    - name: Install corosync configuration
      copy:
        src: "{{ configure_ha_tmpdir }}/corosync.conf"
        dest: /etc/corosync/corosync.conf
        owner: root
        group: root
        mode: '0644'
    - name: Install corosync key
      copy:
        src: "{{ configure_ha_tmpdir }}/authkey"
        dest: /etc/corosync/authkey
        owner: root
        group: root
        mode: '0400'
    - name: Start pacemaker
      ansible.builtin.systemd:
          name: corosync
          state: started
          enabled: true

- name: Setup Pacemaker on unconfigured_machine_group
  when:
    - "'unconfigured_machine_group' in group_names"
  block:
    - name: Start Pacemaker
      ansible.builtin.systemd:
          name: pacemaker
          state: started
          enabled: true
    - name: Wait for pacemaker
      command: "{{ configure_ha_crm_command_path }} status"
      register: result
      until: result.rc == 0
      retries: 3
      delay: 1
      changed_when: false
    - name: Disable stonith
      command: "{{ configure_ha_crm_command_path }} configure property stonith-enabled=false"
      run_once: true
      when: groups['valid_machine'] is undefined
      changed_when: true

- name: Making sure that Corosync service is started
  ansible.builtin.systemd:
    name: corosync
    state: started
    enabled: yes

# run extra CRM commands
- name: Run extra CRM configuration commands for vm-mgr http api
  command:
    cmd: crm -d config load update -
    stdin: "{{ vmmgrapi_cmd_list }}"
  when:
    - enable_vmmgr_http_api is defined
    - enable_vmmgr_http_api is true
    - admin_cluster_ip is defined
  run_once: true
  register: vmmgrapi_cmd_list_task
  changed_when: "'CIB commit successful' in vmmgrapi_cmd_list_task.stdout"
  vars:
    vmmgrapi_cmd_list: |
      primitive ClusterIP IPaddr2 params ip={{ admin_cluster_ip }} cidr_netmask=32 op monitor interval=30s meta target-role=Started
      primitive vmmgrapi systemd:nginx.service  op monitor interval=30s
      colocation vmmgrapi_colocation inf: ClusterIP vmmgrapi
      order order_ClusterIP_vmmgrapi ClusterIP vmmgrapi
- name: Run extra CRM configuration commands
  command:
    cmd: crm -d config load update -
    stdin: "{{ extra_crm_cmd_to_run }}"
  when: extra_crm_cmd_to_run is defined
  run_once: true
  register: extra_crm_cmd_to_run_task
  changed_when: "'CIB commit successful' in extra_crm_cmd_to_run_task.stdout"
