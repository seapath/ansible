# Copyright (C) 2020, RTE (http://www.rte-france.com)
# Copyright (C) 2023 Savoir-faire Linux, Inc.
# SPDX-License-Identifier: Apache-2.0

# This Ansible playbook configures the networks and defines the hostnames. It
# can be used on cluster machines and VMs. It is called by the playbook
# cluster_setup_main.yaml, but can also be called independently, especially to
# configure VMs.

---

- name: Apply systemd-networkd config with role
  become: true
  hosts:
    - cluster_machines
    - standalone_machine
  vars_files:
    - ../vars/network_vars.yml
  vars:
    systemd_networkd_apply_config: "{{ apply_network_config | default(false) }}"
  roles:
    - systemd_networkd

- name: Apply systemd-networkd config on VMs
  become: true
  hosts:
    - VMs
  vars_files:
    - ../vars/network_vars.yml
  vars:
    systemd_networkd_apply_config: "true"
  roles:
    - systemd_networkd

- name: Configure cluster network
  hosts: cluster_machines
  become: true
  tasks:
    - name: Remove team0 bridge in OVS
      command: "/usr/bin/ovs-vsctl --if-exists del-br team0"
    - name: Create team0 bridge in OVS
      command: "/usr/bin/ovs-vsctl add-br team0"
    - name: Enable RSTP on team0 bridge
      command: "/usr/bin/ovs-vsctl set Bridge team0 rstp_enable=true"
    - name: Set RSTP priority on team0 bridge
      command: "/usr/bin/ovs-vsctl set Bridge team0 other_config=rstp-priority=16384"
    - name: Add interface team0_0 to team0 bridge
      command: "/usr/bin/ovs-vsctl -- --if-exists del-port {{ team0_0 }} -- add-port team0 {{ team0_0 }}"
    - name: Add interface team0_1 to team0 bridge
      command: "/usr/bin/ovs-vsctl -- --if-exists del-port {{ team0_1 }} -- add-port team0 {{ team0_1 }}"

- name: Configure OVS
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  vars:
    apply_config: "{{ apply_network_config | default(false) }}"
  tasks:
    - name: Create OVS configuration
      template:
        src: ../templates/ovs_configuration.json.j2
        dest: /etc/ovs_configuration.json
        validate: setup_ovs.py -v -c -f %s
      register: ovs_conf
    - name: Restart seapath-config_ovs
      ansible.builtin.systemd:
        name: seapath-config_ovs
        state: restarted
      when:
        - apply_config
        - ovs_conf.changed
    - name: Register reboot
      set_fact:
        need_reboot: true
      when:
        - not apply_config
        - ovs_conf.changed

- name: Configure PTP
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  vars:
    apply_config: "{{ apply_network_config | default(false) }}"
  tasks:
    - name: Add ptp vlan
      template:
        src: "../templates/00-ptp.netdev.j2"
        dest: "/etc/systemd/network/00-ptp.netdev"
        group: systemd-network
      when:
        - ptp_vlanid is defined
      register: ptp_netdev_register
    - name: Add IP address to PTP vlan
      template:
        src: "../templates/79-ptp.network.j2"
        dest: "/etc/systemd/network/91-ptp.network"
        group: systemd-network
      when:
        - ptp_vlan_address is defined
        - ptp_vlan_mask is defined
      register: ptp_network_register
    - name : "Add PTP vlan on {{ ptp_interface }}"
      template:
        src: "../templates/79-ptp_interface.network.j2"
        dest: "/etc/systemd/network/91-{{ ptp_interface }}-ptp.network"
        group: systemd-network
      when:
        - ptp_vlanid is defined
      register: ptp_interface_network_register
    - name: Register reboot
      set_fact:
        need_reboot: true
      when:
        - not apply_config
        - ptp_netdev_register.changed or ptp_network_register.changed or ptp_interface_network_register.changed
    - name: Restart systemd-networkd
      ansible.builtin.systemd:
        name: systemd-networkd
        state: restarted
      when:
        apply_config

- name: Configure hostname
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - name: Set hostname
      hostname:
        name: "{{ inventory_hostname }}"
        use: systemd

- name: Configure hosts
  hosts: cluster_machines
  become: true
  tasks:
    - name: Build hosts file
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}(| rbd)$'
        line: "{{ hostvars[item].cluster_ip_addr }} {{ item }}{% if item == inventory_hostname %} rbd{% endif %}"
        state: present
      when: hostvars[item].cluster_ip_addr is defined
      loop: "{{ groups['cluster_machines'] }}"
    - name: Add rbd in hosts file
      replace:
        path: /etc/hosts
        regexp: '.*{{ inventory_hostname }}$'
        replace: '{{ cluster_ip_addr }} {{ inventory_hostname }} rbd'
      when: cluster_ip_addr is defined

- name: Configure syslog-ng
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  tasks:
    - name: Set observer IP address in /etc/syslog-ng/syslog-ng.conf
      lineinfile:
        dest: /etc/syslog-ng/syslog-ng.conf
        regexp: '(^\s*#?\s*(ip\()?)("[1-9][0-9]{2}(\.[0-9]{1,3}){3}")(\))?'
        line: '\1"{{ syslog_server_ip }}"\5'
        backrefs: true
        state: present
      notify:
        - Restart systemd syslog-ng
      when: syslog_server_ip is defined
  handlers:
    - name: Restart systemd syslog-ng
      vars:
        apply_config: "{{ apply_network_config | default(false) }}"
      ansible.builtin.service:
        name: syslog-ng@default
        state: restarted
      when:
        apply_config or (need_reboot is defined and not need_reboot)

- name: Configure TimeMaster
  hosts:
    - cluster_machines
    - standalone_machine
  become: true
  vars:
    apply_config: "{{ apply_network_config | default(false) }}"
  tasks:
    - name: Populate service facts
      service_facts:
    - name: stop and disable systemd-timesyncd if it exists
      service:
        name: "systemd-timesyncd"
        state: stopped
        enabled: false
      when: "'systemd-timesyncd.service' in services"
    - name: Create a linuxptp directory if it does not exist
      file:
        path: /etc/linuxptp
        state: directory
        mode: '0755'
    - name: Create timemaster configuration
      template:
        src: ../templates/timemaster.conf.j2
        dest: /etc/linuxptp/timemaster.conf
      register: timemasterconf1
    - name: comment pool configuration in chrony.conf
      replace:
        path: /etc/chrony.conf
        regexp: '^(pool .*)'
        replace: '#\1'
      register: timemasterconf2
    - name: Create timemaster.service.d directory
      file:
        path: /etc/systemd/system/timemaster.service.d/
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Copy timemaster.service overide
      template:
        src: ../templates/timemaster.service.j2
        dest: /etc/systemd/system/timemaster.service.d/override.conf
      register: timemasterconf3
    - name: Enable timemaster
      service:
        name: "timemaster"
        enabled: true
    - name: restart timemaster if necessary
      service:
        name: "timemaster"
        state: restarted
        enabled: true
        daemon_reload: true
      when:
        - timemasterconf1.changed or timemasterconf2.changed or timemasterconf3.changed
        - apply_config or (need_reboot is defined and not need_reboot)

- name: Stop chrony service if running
  hosts:
    - cluster_machines
    - standalone_machine
    - VMs
  become: true
  tasks:
    - name: Get all services
      service_facts:

    - name: Stop and disable chrony if running
      service:
        name: "chrony"
        state: stopped
        enabled: false
      when: "'chrony.service' in services"

- name: Configure systemd-networkd-wait-online.service
  hosts: hypervisors
  tasks:
    - block:
        - name: Create systemd-networkd-wait-online.service.d directory
          file:
            state: directory
            path: /etc/systemd/system/systemd-networkd-wait-online.service.d
            owner: root
            group: root
            mode: 0644
        - name: Copy systemd-networkd-wait-online.service overide
          template:
            src: ../templates/systemd-networkd-wait-online.service.j2
            dest: >-
              /etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf
      when: cluster_interface is defined

- name: Restart machine if needed
  hosts:
    - cluster_machines
    - standalone_machine
  tasks:
    - include_tasks: tasks/soft_restart_machine.yaml
      when: need_reboot is defined and need_reboot
