# Copyright (C) 2022, RTE (http://www.rte-france.com)
# SPDX-License-Identifier: Apache-2.0

# Ansible playbook that creates the cluster by configuring Corosync and
# Pacemaker. It is called by the playbook cluster_setup_main.yaml, but it can
# also be called independently.

---
- name: Configure SEAPATH specific files
  hosts: cluster_machines
  tasks:
  - name: Save cluster machine informations
    template:
        src: ../templates/cluster.conf.j2
        dest: /etc/cluster.conf

- name: Check if corosync is already setup
  hosts: cluster_machines
  tasks:
    - name: check corosync service status
      systemd:
        name: corosync
        state: started
      check_mode: true
      register: corosync_service_status
    - name: Create a group with unconfigured_machines
      add_host:
        name: "{{ item }}"
        groups: unconfigured_machine_group
      run_once: true
      loop: "{{ groups['cluster_machines'] }}"
      changed_when: false
      when: hostvars[item].corosync_service_status.changed
    - name: Create a group with valid_machines
      add_host:
        name: "{{ item }}"
        groups: valid_machine
      run_once: true
      loop: "{{ groups['cluster_machines'] }}"
      changed_when: false
      when: not hostvars[item].corosync_service_status.changed

- name: Setup Corosync from scratch
  hosts: cluster_machines
  vars_files:
      - ../vars/corosync_vars.yaml
  roles:
      - role: corosync
        when: groups['valid_machine'] is undefined

- name: Fetch existing corosync using configuration
  hosts: valid_machine
  vars:
    tmpdir: "/tmp"
  tasks:
    - block:
        - name: Fetch corosync configuration 
          fetch: 
            src: "/etc/corosync/corosync.conf"
            dest: "{{ tmpdir }}/corosync.conf"
            flat: true
          run_once: true
        - name: Fetch corosync key 
          fetch: 
            src: "/etc/corosync/authkey"
            dest: "{{ tmpdir }}/authkey"
            flat: true
          run_once: true
      when: groups['unconfigured_machine_group'] is defined

- name: Setup Corosync using existing configuration
  hosts: unconfigured_machine_group
  vars:
    tmpdir: "/tmp"
  tasks:
    - block:
        - name: Install corosync configuration 
          copy:
            src: "{{ tmpdir }}/corosync.conf"
            dest: /etc/corosync/corosync.conf
            owner: root
            group: root
            mode: '0644'
        - name: Install corosync key 
          copy:
            src: "{{ tmpdir }}/authkey"
            dest: /etc/corosync/authkey
            owner: root
            group: root
            mode: '0400'
        - name: Start pacemaker
          ansible.builtin.systemd:
              name: corosync
              state: started
              enabled: true
      when: groups['valid_machine'] is defined

- name: Setup Pacemaker
  hosts: unconfigured_machine_group
  tasks:
      - name: Start Pacemaker
        ansible.builtin.systemd:
            name: pacemaker
            state: started
            enabled: true
      - name: wait for pacemaker
        command: crm status
        register: result
        until: result.rc == 0
        retries: 3
        delay: 1
      - name: Disable stonith
        command: crm configure property stonith-enabled=false
        run_once: true
        when: groups['valid_machine'] is undefined

- name: run extra CRM commands
  hosts: all
  become: true
  tasks:
      - name: run extra CRM configuration commands
        command: "/usr/sbin/crm configure {{ item }}"
        when: extra_crm_cmd_to_run is defined
        run_once: true
        no_log: true
        failed_when: 0 == 1
        loop: "{{ extra_crm_cmd_to_run }}"
