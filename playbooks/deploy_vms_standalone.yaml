# Copyright (C) 2023, RTE (http://www.rte-france.com)
# SPDX-License-Identifier: Apache-2.0

---
- hosts: hypervisors
  name: Create and start VMs
  gather_facts: false
  become: true
  vars:
    disk_pool: "/var/lib/libvirt/images"
    disk_copy: true
  tasks:
    - name: List all VMs
      virt:
        command: list_vms
      register: all_vms

    - name: Stop VM
      virt:
        state: destroyed
        name: "{{ item }}"
      when:
        - item in all_vms.list_vms
        - hostvars[item].force is defined
        - hostvars[item].force
      loop: "{{ groups['VMs'] }}"

    - name: Undefine VM
      command: "virsh undefine --nvram {{ item }}"
      when:
        - item in all_vms.list_vms
        - hostvars[item].force is defined
        - hostvars[item].force
      loop: "{{ groups['VMs'] }}"

    - name: Print info
      debug:
        var: hostvars[item]
        verbosity: 2
      loop: "{{ groups['VMs'] }}"

    - name: Check tmp folder permission
      file:
        path: "{{ qcow2tmpuploadfolder }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      when: qcow2tmpuploadfolder is defined

    - name: Copy the disk on target
      copy:
        src: "{{ hostvars[item].vm_disk }}"
        dest: "{{ disk_pool }}/{{ hostvars[item].inventory_hostname }}.qcow2"
      vars:
        ansible_remote_tmp: "{{ qcow2tmpuploadfolder | default(omit) }}"
      when:
        - disk_copy | bool
        - hostvars[item].disk_extract is not defined or not hostvars[item].disk_extract | bool
        - item not in all_vms.list_vms or (item in all_vms.list_vms and hostvars[item].force is defined and hostvars[item].force)
      loop: "{{ groups['VMs'] }}"

    - name: Copy the gzipped disk on target
      copy:
        src: "{{ hostvars[item].vm_disk }}"
        dest: "{{ disk_pool }}/{{ hostvars[item].inventory_hostname }}.img.gz"
      when:
        - disk_copy | bool
        - hostvars[item].disk_extract is defined
        - hostvars[item].disk_extract | bool
        - item not in all_vms.list_vms or (item in all_vms.list_vms and hostvars[item].force is defined and hostvars[item].force)
      loop: "{{ groups['VMs'] }}"

    - name: Extract the gzipped disk on target
      command:
        cmd: "gzip -d -f {{ disk_pool }}/{{ hostvars[item].inventory_hostname }}.img.gz"
        creates: "{{ hostvars[item].inventory_hostname }}.img"
      when:
        - disk_copy | bool
        - hostvars[item].disk_extract is defined
        - hostvars[item].disk_extract | bool
        - item not in all_vms.list_vms or (item in all_vms.list_vms and hostvars[item].force is defined and hostvars[item].force)
      loop: "{{ groups['VMs'] }}"

    - name: Add main disk to disk list
      # This is only done in standalone because the disk is handled by vm-manager in the cluster
      set_fact:
        standalone_main_disk: "{{ hostvars[item].inventory_hostname }}.qcow2"
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ groups['VMs'] }}"
      when: item not in all_vms.list_vms or (item in all_vms.list_vms and hostvars[item].force is defined and hostvars[item].force)

    - name: Export VM config for debug in /tmp
      template:
        src: "{{ hostvars[item].vm_template }}"
        dest: "/tmp/{{ hostvars[item].inventory_hostname }}.xml"
      vars:
        vm: "{{ hostvars[item] }}"
      when: ansible_verbosity >= 2
      loop: "{{ groups['VMs'] }}"

    - name: Create VMs
      virt:
        command: define
        xml: >-
          {{ lookup('template',
          hostvars[item].vm_template,
          template_vars=dict(vm=hostvars[item])) }}
      loop: "{{ groups['VMs'] }}"
      when: item not in all_vms.list_vms or (item in all_vms.list_vms and hostvars[item].force is defined and hostvars[item].force)

    - name: Start VMs
      virt:
        name: "{{ item }}"
        state: running
      loop: "{{ groups['VMs'] }}"
      when: hostvars[item].enable | default(true)

- hosts: VMs
  name: Wait for VMs to be online
  gather_facts: false
  tasks:
    - name: Wait for VM connections
      wait_for_connection:
