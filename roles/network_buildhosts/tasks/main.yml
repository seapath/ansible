# Copyright (C) 2024 RTE
# SPDX-License-Identifier: Apache-2.0

---
- name: Set hostname
  hostname:
    name: "{{ hostname | default(inventory_hostname) }}"
    use: systemd
- name: Build hosts file (Cluster Network)
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ hostvars[item].hostname | default(item) }}(| rbd)$'
    line: "{{ hostvars[item].cluster_ip_addr }} {{ item }} {{ hostvars[item].hostname | default('') }}{% if hostvars[item].hostname is defined %} {% endif %}{% if item == inventory_hostname %}rbd{% endif %}"
    state: present
  loop: "{{ groups['cluster_machines'] | default([]) }}"
  when: hostvars[item].cluster_ip_addr is defined
- name: Build hosts file (Public Network) 
  # if cluster_ip_addr is not defined, we consider there is no cluster Network.
  # Ceph will use the public network instead.
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ hostvars[item].hostname | default(item) }}(| rbd)$'
    line: "{{ hostvars[item].ip_addr }} {{ item }} {{ hostvars[item].hostname | default('') }}{% if hostvars[item].hostname is defined %} {% endif %}{% if item == inventory_hostname %}rbd{% endif %}"
    state: present
  loop: "{{ groups['cluster_machines'] | default([]) }}"
  when: hostvars[item].cluster_ip_addr is undefined
- name: Build hosts file for Standalone machines
  lineinfile:
    dest: /etc/hosts
    line: "{{ ip_addr | default(ansible_host) }} {{ inventory_hostname }} {{ hostname | default('') }}"
    state: present
  when: inventory_hostname in groups['standalone_machine']|default([])
- name: Remove 'debian' from hosts file
  lineinfile:
    dest: /etc/hosts
    state: absent
    regexp: '^127.*debian'

- name: Push custom host file
  when: hosts_path is defined
  block:
    - name: Check if the hosts file exists
      delegate_to: localhost
      stat:
        path: "{{ hosts_path }}"
      register: hosts_file_exists
      become: false
    - when: hosts_file_exists.stat.exists
      block:
        - name: Read the hosts file content if it exists
          delegate_to: localhost
          slurp:
            src: "{{ hosts_path }}"
          register: hosts_content
          become: false
        - name: Ensure /etc/hosts contains the updated user hosts content
          blockinfile:
            path: /etc/hosts
            block: "{{ hosts_content.content | b64decode }}"
            marker: "# {mark} user hosts file"
