- name: enable docker.service
  ansible.builtin.systemd:
    name: docker.service
    enabled: yes
    state: started
- name: enable docker.socket
  ansible.builtin.systemd:
    name: docker.socket
    enabled: yes
    state: started

- name: add vhost_vsock to /etc/modules
  lineinfile:
    dest: /etc/modules
    state: present
    regexp: '^vhost_vsock$'
    line: 'vhost_vsock'

- name: add sriov driver to /etc/modules
  lineinfile:
    dest: /etc/modules
    state: present
    regexp: "^{{ sriov_driver }}$"
    line: "{{ sriov_driver }}"
  when: sriov_driver is defined
- name: add sriov apparmor permission for libvirt
  lineinfile:
    dest: /etc/apparmor.d/local/abstractions/libvirt-qemu
    state: present
    line: '/dev/vfio/* rw,'
    create: yes
    mode: 0644
  when: sriov_driver is defined
- name: load the sriov module
  community.general.modprobe:
    name: "{{ sriov_driver }}"
    state: present
  when: sriov_driver is defined

- name: add sriov sysfs rules
  ansible.builtin.lineinfile:
    dest: "/etc/sysfs.d/sriov.conf"
    state: present
    regexp: "^class/net/{{ item.key }}/device/sriov_numvfs = "
    line: "class/net/{{ item.key }}/device/sriov_numvfs = {{ item.value }}"
    create: yes
    mode: 0644
  with_items: "{{ sriov | dict2items }}"
  when: sriov is defined
  register: sriov_sysfs
- name: restart sysfsutils
  ansible.builtin.systemd:
    name: sysfsutils.service
    state: restarted
  when: sriov_sysfs.changed

- name: "irqbalance conf"
  lineinfile:
    dest: /etc/default/irqbalance
    regexp: '^IRQBALANCE_BANNED_CPULIST=".*"$'
    line: 'IRQBALANCE_BANNED_CPULIST="{{ isolcpus }}"'
    state: present
  register: irqbalanceconf
  when: isolcpus is defined
- name: "irqbalance conf revert"
  lineinfile:
    dest: /etc/default/irqbalance
    regexp: '^#?IRQBALANCE_BANNED_CPULIST=(.*)$'
    line: '#IRQBALANCE_BANNED_CPULIST=\1'
    state: present
    backrefs: yes
  register: irqbalanceconf
  when: isolcpus is not defined
- name: restart irqbalance
  ansible.builtin.systemd:
    name: irqbalance.service
    enabled: yes
    state: restarted
  when: irqbalanceconf.changed

- name: "systemd conf RuntimeWatchdogSec"
  lineinfile:
    dest: /etc/systemd/system.conf
    regexp: '^RuntimeWatchdogSec=.*$'
    line: "RuntimeWatchdogSec=20"
    state: present
- name: "systemd conf RebootWatchdogSec"
  lineinfile:
    dest: /etc/systemd/system.conf
    regexp: '^RebootWatchdogSec=.*$'
    line: "RebootWatchdogSec=5min"
    state: present

- block:
  - name: "Create systemd slices override (folder)"
    file:
      path: /etc/systemd/system.control/{{ item }}.slice.d
      state: directory
      owner: root
      group: root
      mode: 0755
    with_items:
      - "system"
      - "user"
      - "machine"
  - name: create systemd slices override (files)
    template:
      src: ../templates/systemd_slice_override.j2
      dest: /etc/systemd/system.control/{{ item.name }}.slice.d/50-AllowedCPUs.conf
      owner: root
      group: root
      mode:  0644
    with_items:
      - { name: "system", description: "system slice", allowedcpus: "{{ cpusystem }}" }
      - { name: "user", description: "user slice", allowedcpus: "{{ cpuuser }}" }
      - { name: "machine", description: "machine slice", allowedcpus: "{{ cpumachines }}" }
  when:
    - cpusystem is defined
    - cpuuser is defined
    - cpumachines is defined
- name: Create systemd slices override REVERT
  file:
    path: /etc/systemd/system.control/{{ item }}.slice.d
    state: absent
  with_items:
    - "system"
    - "user"
    - "machine"
  when: cpusystem is not defined or cpuuser is not defined or cpumachines is not defined

- name: create systemd slices
  template:
    src: ../templates/systemd_slice.j2
    dest: /etc/systemd/system/{{ item.name }}.slice
    owner: root
    group: root
    mode:  0644
  with_items:
    - { name: "machine-rt", description: "VM rt slice", wants: "machine.slice", allowedcpus: "{{ cpumachinesrt }}" }
    - { name: "machine-nort", description: "VM nonrt slice", wants: "machine.slice", allowedcpus: "{{ cpumachinesnort }}" }
    - { name: "ovs", description: "ovs slice", wants: "", allowedcpus: "{{ cpuovs }}" }
  register: newslices
  when:
    - cpumachinesrt is defined
    - cpumachinesnort is defined
    - cpuovs is defined
- name: create systemd slices REVERT
  file:
    path: /etc/systemd/system/{{ item }}.slice
    state: absent
  with_items:
    - "machine-rt"
    - "machine-nort"
    - "ovs"
  register: removeslices
  when: cpumachinesrt is not defined and cpumachinesnort is not defined and cpuovs is not defined

- name: start new slices
  ansible.builtin.systemd:
    name: "{{ item }}.slice"
    state: restarted
    daemon_reload: yes
  with_items:
    - "machine-rt"
    - "machine-nort"
    - "ovs"
  when: newslices.changed
- name: start new slices REVERT
  ansible.builtin.systemd:
    name: "{{ item }}.slice"
    state: stopped
    daemon_reload: yes
  with_items:
    - "machine-rt"
    - "machine-nort"
    - "ovs"
  when: removeslices.changed

- name: make sure tuned package is installed
  ansible.builtin.apt:
    name: tuned
    state: present

- name: create tuned seapath-rt profile folder
  file:
    path: /etc/tuned/seapath-rt-host
    state: directory
    mode: '0755'

- name: copy seapath-rt-host tuned profile variable file
  template:
    src: ../src/tuned/seapath-rt-host-variables.conf.j2
    dest: /etc/tuned/seapath-rt-host/seapath-rt-host-variables.conf
    group: root
    owner: root
    mode: '0644'

- name: copy seapath-rt-host tuned profile conf
  copy:
    src: ../src/tuned/tuned.conf
    dest: /etc/tuned/seapath-rt-host/tuned.conf
    group: root
    owner: root
    mode: '0644'

- name: remove tuned dynamic tuning
  lineinfile:
    dest: /etc/tuned/tuned-main.conf
    state: present
    regexp: '^#?dynamic_tuning = .*$'
    line: 'dynamic_tuning = 0'

- name: enable tuned.service
  ansible.builtin.systemd:
    name: tuned.service
    enabled: yes
    state: restarted

- name: enable tuned.service
  ansible.builtin.systemd:
    name: tuned.service
    enabled: yes
    state: started

- name: set tuned profile
  ansible.builtin.command: tuned-adm profile seapath-rt-host

- name: Create ovs-vswitchd.service.d directory
  file:
    path: /etc/systemd/system/ovs-vswitchd.service.d/
    state: directory
    owner: root
    group: root
    mode: 0755
- name: Copy ovs-vswitchd.service drop-in
  ansible.builtin.copy:
    src: ../src/debian/ovs-vswitchd_override.conf
    dest: /etc/systemd/system/ovs-vswitchd.service.d/override.conf
    owner: root
    group: root
    mode: 0644
  register: ovsvswitchd
- name: Restart ovs-vswitchd
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: yes
    name: ovs-vswitchd
  when: ovsvswitchd.changed


- name: Copy ptp_status executable files
  ansible.builtin.copy:
    src: ../src/debian/ptpstatus/{{ item }}
    dest: /usr/local/bin/{{ item }}
    mode: '0755'
  with_items:
    - ptpstatus.sh
- name: Copy ptp_vsock executable files
  ansible.builtin.copy:
    src: ../src/debian/ptp_vsock.py
    dest: /usr/local/bin/ptp_vsock.py
    mode: '0755'

- name: Copy ptp_status.service
  ansible.builtin.copy:
    src: ../src/debian/ptpstatus/ptpstatus.service
    dest: /etc/systemd/system/ptpstatus.service
    mode: '0644'
  register: ptpstatus
- name: Copy ptp_vsock.service
  ansible.builtin.copy:
    src: ../src/debian/ptp_vsock.service
    dest: /etc/systemd/system/ptp_vsock.service
    mode: '0644'
  register: ptpvsock
- name: daemon-reload ptp status
  ansible.builtin.service:
    daemon_reload: yes
  when: ptpstatus.changed or ptpvsock.changed
- name: enable ptpstatus.service
  ansible.builtin.systemd:
    name: ptpstatus.service
    enabled: yes
    state: started
- name: enable ptp_vsock.service
  ansible.builtin.systemd:
    name: ptp_vsock.service
    enabled: yes
    state: started
