- name: create src folder on hosts
  file:
    path: /tmp/src
    state: directory
    mode: '0755'

- name: Synchronization of src python3-setup-ovs on the control machine to dest on the remote hosts
  ansible.posix.synchronize:
    src: ../src/debian/python3-setup-ovs
    dest: /tmp/src
    rsync_opts:
      - "--chown=root:root"
- name: Install python3-setup-ovs
  command:
    cmd: /usr/bin/python3 setup.py install
    chdir: /tmp/src/python3-setup-ovs
- name: Copy votp-config_ovs.service
  ansible.builtin.copy:
    src: ../src/debian/votp-config_ovs.service
    dest: /etc/systemd/system/votp-config_ovs.service
    mode: '0644'
  register: votpconfigovs
- name: daemon-reload votp-config_ovs
  ansible.builtin.service:
    daemon_reload: yes
  when: votpconfigovs.changed
- name: enable votp-config_ovs.service
  ansible.builtin.systemd:
    name: votp-config_ovs.service
    enabled: yes

- name: Synchronization of src vm_manager on the control machine to dest on the remote hosts
  ansible.posix.synchronize:
    src: ../src/debian/vm_manager
    dest: /tmp/src
    rsync_opts:
      - "--chown=root:root"
- name: Install vm_manager
  command:
    cmd: /usr/bin/python3 setup.py install
    chdir: /tmp/src/vm_manager
- name: Create a symbolic link
  ansible.builtin.file:
    src: /usr/local/bin/vm_manager_cmd.py
    dest: /usr/local/bin/vm-mgr
    state: link

- name: Synchronization of backup-restore folder on the control machine to dest on the remote hosts
  ansible.posix.synchronize:
    src: ../src/debian/backup-restore/
    dest: /usr/local/bin/
    rsync_opts:
      - "--chown=root:root"

- name: Copy consolevm.sh
  template:
    src: ../src/debian/consolevm.sh.j2
    dest: /usr/local/bin/consolevm
    mode: '0755'

- name: disable vim defaults
  lineinfile:
    dest: /etc/vim/vimrc
    regexp: '^"? *let g:skip_defaults_vim = 1$'
    line: "let g:skip_defaults_vim = 1"
    state: present
- name: vim color syntax
  lineinfile:
    dest: /etc/vim/vimrc
    regexp: '^"? *syntax on$'
    line: "syntax on"
    state: present
- name: remove vimrc.local file
  file:
    path: /etc/vim/vimrc.local
    state: absent

- name: create /usr/lib/ocf/resource.d/seapath on hosts
  file:
    path: /usr/lib/ocf/resource.d/seapath
    state: directory
    mode: '0755'

- name: Copy VirtualDomain file
  ansible.builtin.copy:
    src: ../src/debian/VirtualDomain
    dest: /usr/lib/ocf/resource.d/seapath/VirtualDomain
    mode: '0755'

- name: create /var/log/syslog-ng folder on hosts
  file:
    path: /var/log/syslog-ng
    state: directory
    mode: '0755'
- name: Copy syslog-ng conf file
  template:
    src: ../templates/syslog-ng.conf.j2
    dest: /etc/syslog-ng/syslog-ng.conf
    mode: '0644'
  notify: restart syslog-ng
- block:
  - name: Create /etc/syslog-ng/cert.d
    file:
      path: /etc/syslog-ng/cert.d
      state: directory
      mode: '0755'
  - name: Create /etc/syslog-ng/ca.d
    file:
      path: /etc/syslog-ng/ca.d/
      state: directory
      mode: '0755'
  - name: copy syslog client certificate
    ansible.builtin.copy:
      src: "{{ syslog_tls_ca }}"
      dest: /etc/syslog-ng/cert.d/clientcert.pem
      mode: '0644'
  - name: copy syslog key
    ansible.builtin.copy:
      src: "{{ syslog_tls_key }}"
      dest: /etc/syslog-ng/cert.d/clientkey.pem
      mode: '0400'
  - name: copy syslog server ca
    ansible.builtin.copy:
      src: "{{ syslog_tls_server_ca }}"
      dest: /etc/syslog-ng/ca.d/serverca.pem
      mode: '0644'
  when:
    - syslog_tls_ca is defined
    - syslog_tls_key is defined
    - syslog_tls_server_ca is defined

- name: Create libvirtd.service.d directory
  file:
    path: /etc/systemd/system/libvirtd.service.d/
    state: directory
    owner: root
    group: root
    mode: 0755
- name: Copy libvirtd.service drop-in
  ansible.builtin.copy:
    src: ../src/debian/libvirtd_override.conf
    dest: /etc/systemd/system/libvirtd.service.d/override.conf
    owner: root
    group: root
    mode: 0644
  notify: daemon-reload
- name: Create pacemaker.service.d directory
  file:
    path: /etc/systemd/system/pacemaker.service.d/
    state: directory
    owner: root
    group: root
    mode: 0755
- name: Copy pacemaker.service drop-in
  ansible.builtin.copy:
    src: ../src/debian/pacemaker_override.conf
    dest: /etc/systemd/system/pacemaker.service.d/override.conf
    owner: root
    group: root
    mode: 0644
  notify: daemon-reload
  register: pacemaker_corosync
- name: Get Pacemaker service Status
  ansible.builtin.systemd:
    name: "pacemaker.service"
  register: pacemaker_service_status
- name: disable pacemaker (reinstall step 1/2)
  ansible.builtin.systemd:
    name: pacemaker.service
    enabled: no
  when: pacemaker_corosync.changed and pacemaker_service_status.status.UnitFileState == "enabled"
- name: enable pacemaker (reinstall step 2/2)
  ansible.builtin.systemd:
    name: pacemaker.service
    enabled: yes
  when: pacemaker_corosync.changed and pacemaker_service_status.status.UnitFileState == "enabled"

- name: get Debian-snmp uid
  getent:
    database: passwd
    key: "Debian-snmp"
- name: get Debian-snmp gid
  getent:
    database: group
    key: "Debian-snmp"
- debug:
    msg:
      - "user id {{ getent_passwd['Debian-snmp'][1] }}"
      - "group id {{ getent_group['Debian-snmp'][1] }}"

- name: Set Debian-snmp correct uid/gid
  block:
    - name: stop snmpd if needed
      ansible.builtin.systemd:
        name: snmpd.service
        state: stopped
    - name: Ensure group "Debian-snmp" exists with correct gid
      ansible.builtin.group:
        name: Debian-snmp
        state: present
        gid: 902
    - name: Ensure user Debian-snmp has correct uid and gid
      user:
        name: Debian-snmp
        uid: 902
        group: Debian-snmp
    - name: restart snmpd
      ansible.builtin.systemd:
        name: snmpd.service
        state: started
  when: getent_passwd['Debian-snmp'][1] != "902" or getent_group['Debian-snmp'][1] != "902"

- name: Synchronization of snmp_ scripts
  ansible.posix.synchronize:
    src: ../src/debian/
    dest: /usr/local/bin/
    rsync_opts:
    - "--include=snmp_*.sh"
    - "--include=virt-df.sh"
    - "--exclude=*"
    - "--chmod=F755"
    - "--chown=root:root"
- name: Snmp config
  ansible.builtin.template:
    src: ../src/debian/snmpd.conf.j2
    dest: /etc/snmp/snmpd.conf
    mode: '0644'
  register: snmpd_conf
- name: Wait for DHCP for SNMP
  lineinfile:
    dest: /lib/systemd/system/snmpd.service
    regexp: "^After="
    line: "After=network-online.target"
    state: present
- name: restart snmpd
  ansible.builtin.systemd:
    name: snmpd.service
    state: restarted
  when: snmpd_conf.changed

- name: removing or not the virtu user created by the iso
  block:
    - name: remove 'virtu' from sudoers file
      lineinfile:
        dest: /etc/sudoers
        state: absent
        regexp: '^virtu'
        validate: visudo -cf %s
    - name: Remove the virtu user 
      ansible.builtin.user:
        name: virtu
        state: absent
        remove: yes
    - name: Remove the virtu group 
      ansible.builtin.group:
        name: virtu
        state: absent
  when: admin_user != "virtu"

- name: Install sudo Debian-snmp user rules
  copy:
    src: ../src/debian/sudoers/Debian-snmp
    dest: /etc/sudoers.d/Debian-snmp
    owner: root
    group: root
    mode: '0440'

- name: Copy journald conf file
  ansible.builtin.copy:
    src: ../src/debian/journald.conf
    dest: /etc/systemd/journald.conf
    mode: '0644'
  register: journaldconf
- name: Restart systemd-journald
  ansible.builtin.systemd:
    state: restarted
    name: systemd-journald
  when: journaldconf.changed

- name: Ensure admin group exists
  ansible.builtin.group:
    name: "{{ admin_user }}"
    state: present
    gid: 1000
- name: Adding admin user
  user:
    name: "{{ admin_user }}"
    shell: /bin/bash
    group: "{{ admin_user }}"
    groups: libvirt,haclient
    uid: 1000
    password: "{{ admin_passwd | default(omit) }}"
    append: no
- name: Add authorized keys to admin user
  authorized_key:
    user: "{{ admin_user }}"
    key: "{{ item }}"
  with_items: "{{ admin_ssh_keys }}"
  when: admin_ssh_keys is defined and admin_ssh_keys is iterable
- name: Install sudo admin user rules
  copy:
    content: |
      {{ admin_user }}   ALL=NOPASSWD:EXEC: ALL
    dest: "/etc/sudoers.d/{{ admin_user }}"
    owner: root
    group: root
    mode: '0440'

- name: Creating libvirt user with libvirtd permissions
  user: name=libvirt
    group=libvirt
    shell=/bin/false

- name: Copy sysctl rules
  ansible.builtin.copy:
    src: ../src/debian/{{ item }}
    dest: /etc/sysctl.d/{{ item }}
    mode: '0644'
  with_items:
    - 00-panicreboot.conf
    - 00-bridge_nf_call.conf
- name: add br_netfilter to /etc/modules
  lineinfile:
    dest: /etc/modules
    state: present
    regexp: '^br_netfilter$'
    line: 'br_netfilter'
- name: add raid6_pq to /etc/modules
  lineinfile:
    dest: /etc/modules
    state: present
    regexp: '^raid6_pq$'
    line: 'raid6_pq'

- name: Copy apparmor libvirt-qemu rules
  ansible.builtin.copy:
    src: ../src/debian/etc_apparmor.d_abstractions_libvirt-qemu.conf
    dest: /etc/apparmor.d/abstractions/libvirt-qemu
    mode: '0644'

- name: Copy 80-wired networkd file
  ansible.builtin.copy:
    src: ../src/debian/80-wired.network
    dest: /etc/systemd/network/80-wired.network
    mode: '0640'
    owner: root
    group: systemd-network

- name: customize /etc/environment
  ansible.builtin.lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
  vars:
    env_list:
      HISTSIZE: 2000000
      HISTFILESIZE: 2000000
      LIBVIRT_DEFAULT_URI: "qemu:///system"
      HISTTIMEFORMAT: '"%F %T "'
      EDITOR: 'vim'
      SYSTEMD_EDITOR: 'vim'
  with_items: "{{ env_list | dict2items }}"

- name: "PATH for admin user"
  lineinfile:
    dest: "/home/{{ admin_user }}/.bash_profile"
    regexp: '^export PATH'
    line: "export PATH=$PATH:/usr/sbin:/usr/local/sbin:/sbin"
    state: present
    create: yes
    owner: "{{ admin_user }}"
    group: "{{ admin_user }}"
    mode: '0644'

- name: lineinfile in hosts file for logstash-seapath
  lineinfile:
    dest: /etc/hosts
    regexp: '.* logstash-seapath$'
    line: "{{ logstash_server_ip }} logstash-seapath"
    state: present

- name: lineinfile in /etc/default/hddtemp file for DISKS
  lineinfile:
    dest: /etc/default/hddtemp
    regexp: '^DISKS='
    line: "DISKS=\"{{ main_disk }} {{ ceph_osd_disk if ceph_osd_disk is defined else none }}\""
    state: present
  register: updatehddtemp1
- name: lineinfile in /etc/default/hddtemp file for RUN_DAEMON
  lineinfile:
    dest: /etc/default/hddtemp
    regexp: '^RUN_DAEMON='
    line: "RUN_DAEMON=\"true\""
    state: present
  register: updatehddtemp2
- name: lineinfile in /etc/default/hddtemp file for INTERFACE
  lineinfile:
    dest: /etc/default/hddtemp
    regexp: '^INTERFACE='
    line: "INTERFACE=\"{{ ansible_host }}\""
    state: present
  register: updatehddtemp3
- name: Restart hddtemp
  ansible.builtin.systemd:
    state: restarted
    name: hddtemp
  when: updatehddtemp1.changed or updatehddtemp2.changed or updatehddtemp3.changed

- block:
    - name: Remove all file in /etc/apt/sources.list.d
      file:
        path: /etc/apt/sources.list.d
        state: absent
    - name: Configure apt repositories
      template:
        src: sources.list.j2
        dest: /etc/apt/sources.list
  when: apt_repo is defined

- name: Make libvirt use the "machine-id" way to determine host UUID
  lineinfile:
    dest: /etc/libvirt/libvirtd.conf
    regexp: "^#?host_uuid_source ="
    line: "host_uuid_source = \"machine-id\""
    state: present
- name: restart libvirtd
  ansible.builtin.systemd:
    name: libvirtd.service
    state: restarted

- name: "find /etc/default/grub.d/*.cfg (FAI)"
  find:
    paths: /etc/default/grub.d
    patterns: '^\d\d.*\.cfg$'
    use_regex: true
  register: wildcard_files_to_delete

- name: "remove /etc/default/grub.d/*.cfg (FAI)"
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ wildcard_files_to_delete.files }}"

- name: "grub conf"
  lineinfile:
    dest: /etc/default/grub
    regexp: "^(GRUB_CMDLINE_LINUX=(?!.* {{ item }})\"[^\"]*)(\".*)"
    line: '\1 {{ item }}\2'
    state: present
    backrefs: yes
  register: updategrub1
  with_items:
    - ipv6.disable=1
    - efi=runtime
    - console=ttyS0,115200

- name: "grub conf osprober"
  lineinfile:
    dest: /etc/default/grub
    regexp: '^GRUB_DISABLE_OS_PROBER=.*$'
    line: 'GRUB_DISABLE_OS_PROBER=true'
    state: present
  register: updategrub2
- name: update-grub
  command: update-grub
  when: updategrub1.changed or updategrub2.changed
